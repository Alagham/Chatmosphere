// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

<<<<<<< HEAD
import { APIResource } from '../../../resource';
import { isRequestOptions } from '../../../core';
import * as Core from '../../../core';
import * as ContentAPI from './content';
import { Content } from './content';
import { CursorPage, type CursorPageParams } from '../../../pagination';
=======
import { APIResource } from '../../../core/resource';
import * as ContentAPI from './content';
import { Content, ContentRetrieveParams } from './content';
import { APIPromise } from '../../../core/api-promise';
import { CursorPage, type CursorPageParams, PagePromise } from '../../../core/pagination';
import { type Uploadable } from '../../../core/uploads';
import { buildHeaders } from '../../../internal/headers';
import { RequestOptions } from '../../../internal/request-options';
import { multipartFormRequestOptions } from '../../../internal/uploads';
import { path } from '../../../internal/utils/path';
>>>>>>> e219159d18dd1e1bfb8b9b375b5cb4bfbfc62ee9

export class Files extends APIResource {
  content: ContentAPI.Content = new ContentAPI.Content(this._client);

  /**
   * Create a Container File
   *
   * You can send either a multipart/form-data request with the raw file content, or
   * a JSON request with a file ID.
   */
  create(
<<<<<<< HEAD
    containerId: string,
    body: FileCreateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<FileCreateResponse> {
    return this._client.post(
      `/containers/${containerId}/files`,
      Core.multipartFormRequestOptions({ body, ...options }),
=======
    containerID: string,
    body: FileCreateParams,
    options?: RequestOptions,
  ): APIPromise<FileCreateResponse> {
    return this._client.post(
      path`/containers/${containerID}/files`,
      multipartFormRequestOptions({ body, ...options }, this._client),
>>>>>>> e219159d18dd1e1bfb8b9b375b5cb4bfbfc62ee9
    );
  }

  /**
   * Retrieve Container File
   */
  retrieve(
<<<<<<< HEAD
    containerId: string,
    fileId: string,
    options?: Core.RequestOptions,
  ): Core.APIPromise<FileRetrieveResponse> {
    return this._client.get(`/containers/${containerId}/files/${fileId}`, options);
=======
    fileID: string,
    params: FileRetrieveParams,
    options?: RequestOptions,
  ): APIPromise<FileRetrieveResponse> {
    const { container_id } = params;
    return this._client.get(path`/containers/${container_id}/files/${fileID}`, options);
>>>>>>> e219159d18dd1e1bfb8b9b375b5cb4bfbfc62ee9
  }

  /**
   * List Container files
   */
  list(
<<<<<<< HEAD
    containerId: string,
    query?: FileListParams,
    options?: Core.RequestOptions,
  ): Core.PagePromise<FileListResponsesPage, FileListResponse>;
  list(
    containerId: string,
    options?: Core.RequestOptions,
  ): Core.PagePromise<FileListResponsesPage, FileListResponse>;
  list(
    containerId: string,
    query: FileListParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.PagePromise<FileListResponsesPage, FileListResponse> {
    if (isRequestOptions(query)) {
      return this.list(containerId, {}, query);
    }
    return this._client.getAPIList(`/containers/${containerId}/files`, FileListResponsesPage, {
=======
    containerID: string,
    query: FileListParams | null | undefined = {},
    options?: RequestOptions,
  ): PagePromise<FileListResponsesPage, FileListResponse> {
    return this._client.getAPIList(path`/containers/${containerID}/files`, CursorPage<FileListResponse>, {
>>>>>>> e219159d18dd1e1bfb8b9b375b5cb4bfbfc62ee9
      query,
      ...options,
    });
  }

  /**
   * Delete Container File
   */
<<<<<<< HEAD
  del(containerId: string, fileId: string, options?: Core.RequestOptions): Core.APIPromise<void> {
    return this._client.delete(`/containers/${containerId}/files/${fileId}`, {
      ...options,
      headers: { Accept: '*/*', ...options?.headers },
=======
  delete(fileID: string, params: FileDeleteParams, options?: RequestOptions): APIPromise<void> {
    const { container_id } = params;
    return this._client.delete(path`/containers/${container_id}/files/${fileID}`, {
      ...options,
      headers: buildHeaders([{ Accept: '*/*' }, options?.headers]),
>>>>>>> e219159d18dd1e1bfb8b9b375b5cb4bfbfc62ee9
    });
  }
}

<<<<<<< HEAD
export class FileListResponsesPage extends CursorPage<FileListResponse> {}
=======
export type FileListResponsesPage = CursorPage<FileListResponse>;
>>>>>>> e219159d18dd1e1bfb8b9b375b5cb4bfbfc62ee9

export interface FileCreateResponse {
  /**
   * Unique identifier for the file.
   */
  id: string;

  /**
   * Size of the file in bytes.
   */
  bytes: number;

  /**
   * The container this file belongs to.
   */
  container_id: string;

  /**
   * Unix timestamp (in seconds) when the file was created.
   */
  created_at: number;

  /**
   * The type of this object (`container.file`).
   */
  object: 'container.file';

  /**
   * Path of the file in the container.
   */
  path: string;

  /**
   * Source of the file (e.g., `user`, `assistant`).
   */
  source: string;
}

export interface FileRetrieveResponse {
  /**
   * Unique identifier for the file.
   */
  id: string;

  /**
   * Size of the file in bytes.
   */
  bytes: number;

  /**
   * The container this file belongs to.
   */
  container_id: string;

  /**
   * Unix timestamp (in seconds) when the file was created.
   */
  created_at: number;

  /**
   * The type of this object (`container.file`).
   */
  object: 'container.file';

  /**
   * Path of the file in the container.
   */
  path: string;

  /**
   * Source of the file (e.g., `user`, `assistant`).
   */
  source: string;
}

export interface FileListResponse {
  /**
   * Unique identifier for the file.
   */
  id: string;

  /**
   * Size of the file in bytes.
   */
  bytes: number;

  /**
   * The container this file belongs to.
   */
  container_id: string;

  /**
   * Unix timestamp (in seconds) when the file was created.
   */
  created_at: number;

  /**
   * The type of this object (`container.file`).
   */
  object: 'container.file';

  /**
   * Path of the file in the container.
   */
  path: string;

  /**
   * Source of the file (e.g., `user`, `assistant`).
   */
  source: string;
}

export interface FileCreateParams {
  /**
   * The File object (not file name) to be uploaded.
   */
<<<<<<< HEAD
  file?: Core.Uploadable;
=======
  file?: Uploadable;
>>>>>>> e219159d18dd1e1bfb8b9b375b5cb4bfbfc62ee9

  /**
   * Name of the file to create.
   */
  file_id?: string;
}

<<<<<<< HEAD
=======
export interface FileRetrieveParams {
  container_id: string;
}

>>>>>>> e219159d18dd1e1bfb8b9b375b5cb4bfbfc62ee9
export interface FileListParams extends CursorPageParams {
  /**
   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending
   * order and `desc` for descending order.
   */
  order?: 'asc' | 'desc';
}

<<<<<<< HEAD
Files.FileListResponsesPage = FileListResponsesPage;
=======
export interface FileDeleteParams {
  container_id: string;
}

>>>>>>> e219159d18dd1e1bfb8b9b375b5cb4bfbfc62ee9
Files.Content = Content;

export declare namespace Files {
  export {
    type FileCreateResponse as FileCreateResponse,
    type FileRetrieveResponse as FileRetrieveResponse,
    type FileListResponse as FileListResponse,
<<<<<<< HEAD
    FileListResponsesPage as FileListResponsesPage,
    type FileCreateParams as FileCreateParams,
    type FileListParams as FileListParams,
  };

  export { Content as Content };
=======
    type FileListResponsesPage as FileListResponsesPage,
    type FileCreateParams as FileCreateParams,
    type FileRetrieveParams as FileRetrieveParams,
    type FileListParams as FileListParams,
    type FileDeleteParams as FileDeleteParams,
  };

  export { Content as Content, type ContentRetrieveParams as ContentRetrieveParams };
>>>>>>> e219159d18dd1e1bfb8b9b375b5cb4bfbfc62ee9
}
